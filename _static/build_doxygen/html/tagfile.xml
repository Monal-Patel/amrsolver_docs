<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>Closures.h</name>
    <path>/media/monal/main/code/amrsolver1/src/cls/</path>
    <filename>Closures_8h.html</filename>
    <class kind="class">EosBase</class>
    <class kind="class">FluidState</class>
    <class kind="class">calorifically_perfect_gas_t</class>
    <class kind="class">visc_const_t</class>
    <class kind="class">visc_suth_t</class>
    <class kind="class">cond_const_t</class>
    <class kind="class">cond_suth_t</class>
    <class kind="class">closures_derived_t</class>
  </compound>
  <compound kind="file">
    <name>CNS_K.h</name>
    <path>/media/monal/main/code/amrsolver1/src/cls/</path>
    <filename>CNS__K_8h.html</filename>
    <member kind="function">
      <type>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>cns_estdt</name>
      <anchorfile>CNS__K_8h.html</anchorfile>
      <anchor>ac4db5fc5db3dedcf3a0c68d249d49dd9</anchor>
      <arglist>(Box const &amp;bx, Array4&lt; Real const &gt; const &amp;state, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, const PROB::ProbClosures &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>pointCFL</name>
      <anchorfile>CNS__K_8h.html</anchorfile>
      <anchor>aeccbca366fb3480fefa8e34f61d3ba83</anchor>
      <arglist>(int i, int j, int k, Array2D&lt; Real, 0, 2, 0, 2 &gt; &amp;array, const Array4&lt; const Real &gt; &amp;prims, const PROB::ProbClosures &amp;closures, const auto dx, Real dt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_compute_temperature</name>
      <anchorfile>CNS__K_8h.html</anchorfile>
      <anchor>a0b12c440e050457419448a922b2b8e49</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;u, const PROB::ProbClosures &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derpres</name>
      <anchorfile>CNS__K_8h.html</anchorfile>
      <anchor>a2a056f09fc1ba80d8f21c6834aa91113</anchor>
      <arglist>(const Box &amp;bx, FArrayBox &amp;derfab, int dcomp, int, const FArrayBox &amp;datafab, const Geometry &amp;, Real, const int *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dertemp</name>
      <anchorfile>CNS__K_8h.html</anchorfile>
      <anchor>a2fb143a5bb04a286051aeb9d015ccccc</anchor>
      <arglist>(const Box &amp;bx, FArrayBox &amp;derfab, int dcomp, int, const FArrayBox &amp;datafab, const Geometry &amp;, Real, const int *, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dervel</name>
      <anchorfile>CNS__K_8h.html</anchorfile>
      <anchor>a30b1104d74424eb86fda01178b529fe0</anchor>
      <arglist>(const Box &amp;bx, FArrayBox &amp;derfab, int dcomp, int, const FArrayBox &amp;datfab, const Geometry &amp;, Real, const int *, const int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CNS.cpp</name>
    <path>/media/monal/main/code/amrsolver1/src/</path>
    <filename>CNS_8cpp.html</filename>
    <includes id="CNS_8h" name="CNS.h" local="no" imported="no">CNS.h</includes>
    <includes id="CNS__K_8h" name="CNS_K.h" local="no" imported="no">CNS_K.h</includes>
    <includes id="CentralKEEP_8h" name="CentralKEEP.h" local="no" imported="no">CentralKEEP.h</includes>
  </compound>
  <compound kind="file">
    <name>CNS.h</name>
    <path>/media/monal/main/code/amrsolver1/src/</path>
    <filename>CNS_8h.html</filename>
    <class kind="class">CNS</class>
    <member kind="function">
      <type>void</type>
      <name>cns_bcfill</name>
      <anchorfile>CNS_8h.html</anchorfile>
      <anchor>aba6f4b23cd1e06a4107da4a2a133ead4</anchor>
      <arglist>(amrex::Box const &amp;bx, amrex::FArrayBox &amp;data, const int dcomp, const int numcomp, amrex::Geometry const &amp;geom, const amrex::Real time, const amrex::Vector&lt; amrex::BCRec &gt; &amp;bcr, const int bcomp, const int scomp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IBM.cpp</name>
    <path>/media/monal/main/code/amrsolver1/src/ibm/</path>
    <filename>IBM_8cpp.html</filename>
    <includes id="IBM_8h" name="IBM.h" local="no" imported="no">IBM.h</includes>
    <member kind="function">
      <type>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void</type>
      <name>extrapolateGP</name>
      <anchorfile>IBM_8cpp.html</anchorfile>
      <anchor>a740bccc8d6c8d1ea9c24896db7790552</anchor>
      <arglist>(Array2D&lt; Real, 0, NIMPS+1, 0, NPRIM-1 &gt; &amp;state, Real dgp, Real dim)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void</type>
      <name>global2local</name>
      <anchorfile>IBM_8cpp.html</anchorfile>
      <anchor>a396f52e6381230aa4529a35700ade0b5</anchor>
      <arglist>(int jj, Array2D&lt; Real, 0, NIMPS+1, 0, NPRIM-1 &gt; &amp;primStateNormal, const Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &amp;norm, const Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &amp;tan1, const Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &amp;tan2)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void</type>
      <name>local2global</name>
      <anchorfile>IBM_8cpp.html</anchorfile>
      <anchor>ab53277aa7ac63e966d1f3d448754208b</anchor>
      <arglist>(int jj, Array2D&lt; Real, 0, NIMPS+1, 0, NPRIM-1 &gt; &amp;primStateNormal, const Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &amp;norm, const Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &amp;tan1, const Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &amp;tan2)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void</type>
      <name>ComputeGPState</name>
      <anchorfile>IBM_8cpp.html</anchorfile>
      <anchor>a8617747b154553508526959b67cfc38c</anchor>
      <arglist>(int ii, auto const gp_ijk, auto const imp_ijk, auto const weights, auto const norm, auto const tan1, auto const tan2, const Real disGP, const Real disIM, const Array4&lt; bool &gt; ibFab, Array4&lt; Real &gt; primFab, Array4&lt; Real &gt; conFab, auto const idxCube, const PROB::ProbClosures &amp;closures)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IBM.h</name>
    <path>/media/monal/main/code/amrsolver1/src/ibm/</path>
    <filename>IBM_8h.html</filename>
    <class kind="struct">IBM::surfdata</class>
    <class kind="struct">IBM::gpData_t</class>
    <class kind="class">IBM::IBFab</class>
    <class kind="class">IBM::IBMultiFab</class>
    <class kind="class">IBM::IB</class>
    <namespace>IBM</namespace>
    <member kind="typedef">
      <type>CGAL::Simple_cartesian&lt; Real &gt;</type>
      <name>K2</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a5c173780993440fb7c53b55b9d617904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K2::Point_3</type>
      <name>Point</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>ab004ecad26abd07304721f93b53c96d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::Polyhedron_3&lt; K2 &gt;</type>
      <name>Polyhedron</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>aef0e4eb6d237070846f13a40d2e90063</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K2::FT</type>
      <name>FT</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a2ddefb5d5000c4bfda7bea2d34f5e6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K2::Segment_3</type>
      <name>Segment</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a3bc0f9fb0e76244cb684d35d4cf0ac83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::AABB_face_graph_triangle_primitive&lt; Polyhedron &gt;</type>
      <name>Primitive</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>af12ba22129ce6cc0a035cbc8c914cab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::AABB_traits&lt; K2, Primitive &gt;</type>
      <name>Traits</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a26dbd197d9ba9813a5c7aeb26f2282da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::AABB_tree&lt; Traits &gt;</type>
      <name>Tree</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>ad9f4d764f206d71381e965523b58ace3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tree::Point_and_primitive_id</type>
      <name>Point_and_primitive_id</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a7ae8422f8b42c8d6e43ac05822de0904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K2::Vector_3</type>
      <name>Vector_CGAL</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a3ed74778d4b5bb4688ad8aa65f024af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Polyhedron &gt;::face_descriptor</type>
      <name>face_descriptor</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>ad80af28e30018458d4c4c1efc0ba02d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::Side_of_triangle_mesh&lt; Polyhedron, K2 &gt;</type>
      <name>inside_t</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>abc7199df80b955d2b33855e7382f4d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IB</type>
      <name>ib</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a4caba61add10b22958723fae113c891a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main.cpp</name>
    <path>/media/monal/main/code/amrsolver1/src/</path>
    <filename>main_8cpp.html</filename>
    <includes id="CNS_8h" name="CNS.h" local="no" imported="no">CNS.h</includes>
    <member kind="function">
      <type>amrex::LevelBld *</type>
      <name>getLevelBld</name>
      <anchorfile>main_8cpp.html</anchorfile>
      <anchor>adb42db5aeaf9ee121634f02471f0c5a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>main_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Advection.h</name>
    <path>/media/monal/main/code/amrsolver1/src/rhs/</path>
    <filename>Advection_8h.html</filename>
    <class kind="class">Advection</class>
  </compound>
  <compound kind="file">
    <name>CentralKEEP.h</name>
    <path>/media/monal/main/code/amrsolver1/src/rhs/</path>
    <filename>CentralKEEP_8h.html</filename>
    <includes id="CNS_8h" name="CNS.h" local="no" imported="no">CNS.h</includes>
    <namespace>CentralKEEP</namespace>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>fDiv</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>ae953b30c463f9d7eaf144f1b09f19e86</anchor>
      <arglist>(Real f, Real fl)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>fgDiv</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>ae061deca643c9b262b4de2a7badd32bb</anchor>
      <arglist>(Real f, Real fl, Real g, Real gl)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>fgQuad</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>aec5b13640a497b36c9bb76a5e3797721</anchor>
      <arglist>(Real f, Real fl, Real g, Real gl)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>fghCubic</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a6b8cdc9184c5e5ea08187da5464737bd</anchor>
      <arglist>(Real f, Real fl, Real g, Real gl, Real h, Real hl)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>KEEP</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a2fb7ccc76076dde1ebbae4699f6a4c5f</anchor>
      <arglist>(int i, int j, int k, int halfsten, const GpuArray&lt; Real, 3 &gt; &amp;coeffs, const auto &amp;prims, const auto &amp;nfabfx, const auto &amp;nfabfy, const auto &amp;nfabfz, PROB::ProbClosures const &amp;closures)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>KEEPy</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a361d8d139b3ed9b1a976d7e40f1a47f8</anchor>
      <arglist>(int i, int j, int k, int halfsten, const GpuArray&lt; Real, 3 &gt; coeffs, const auto &amp;prims, const auto &amp;nfabfy, PROB::ProbClosures const &amp;parm)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_FORCE_INLINE void</type>
      <name>FluxKEEP</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>ab654c0f6fdd202df7bfb635990de0bd4</anchor>
      <arglist>(MultiFab &amp;statemf, MultiFab &amp;primsmf, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;numflxmf)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_FORCE_INLINE void</type>
      <name>Flux_2nd_Order_KEEP</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a1fe72f8d36b3e2527b53b2b48fa0e3d2</anchor>
      <arglist>(Geometry &amp;geom, MultiFab &amp;primsmf, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;numflxmf)</arglist>
    </member>
    <member kind="variable">
      <type>GpuArray&lt; Real, 3 &gt;</type>
      <name>coeffs</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>afd9feeadebe9ed1b9e675ce6c9f52446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GpuArray&lt; Real, 3 &gt;</type>
      <name>coeffs2</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a062dd2ca304a59490db9136c8947493a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>order_keep</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>aae34eb1423fbae9b5476c98fec4ac1b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CentralSkew.h</name>
    <path>/media/monal/main/code/amrsolver1/src/rhs/</path>
    <filename>CentralSkew_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>CNS_hydro_K.h</name>
    <path>/media/monal/main/code/amrsolver1/src/rhs/</path>
    <filename>CNS__hydro__K_8h.html</filename>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cons2prim</name>
      <anchorfile>CNS__hydro__K_8h.html</anchorfile>
      <anchor>a589895e8d6d71b582eaabf7078b1f0ba</anchor>
      <arglist>(int i, int j, int k, const Array4&lt; const Real &gt; &amp;u, Array4&lt; Real &gt; const &amp;q, const PROB::ProbClosures &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>disconSensor</name>
      <anchorfile>CNS__hydro__K_8h.html</anchorfile>
      <anchor>a9bb4233e9020a577b19287d4e315db5d</anchor>
      <arglist>(Real pp, Real pl, Real pr)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>ComputeSensorLambda</name>
      <anchorfile>CNS__hydro__K_8h.html</anchorfile>
      <anchor>a7d62746cca95b041a15a59b4bd0aa1b5</anchor>
      <arglist>(int i, int j, int k, const auto &amp;prims, const auto &amp;lambda, const auto &amp;sen, const PROB::ProbClosures &amp;closures)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>JSTflux</name>
      <anchorfile>CNS__hydro__K_8h.html</anchorfile>
      <anchor>aa79cf86fb3c3e39788dbd6a9b2fb9a8b</anchor>
      <arglist>(int i, int j, int k, int n, const auto &amp;lambda, const auto &amp;sensor, const auto &amp;cons, const auto &amp;nfabfx, const auto &amp;nfabfy, const auto &amp;nfabfz, const PROB::ProbClosures &amp;closures)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>ViscousFluxes</name>
      <anchorfile>CNS__hydro__K_8h.html</anchorfile>
      <anchor>acad8bba19f088246aed91351f9134dab</anchor>
      <arglist>(int i, int j, int k, auto const &amp;prims, auto const &amp;fx, auto const &amp;fy, auto const &amp;fz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>ViscousWallFluxes</name>
      <anchorfile>CNS__hydro__K_8h.html</anchorfile>
      <anchor>ac8d8a7795bba13759aef96631dd83804</anchor>
      <arglist>(int i, int j, int k, int loc, auto const &amp;prims, auto const &amp;fx, auto const &amp;fy, auto const &amp;fz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>ViscousNumericalFluxes</name>
      <anchorfile>CNS__hydro__K_8h.html</anchorfile>
      <anchor>ad161e92585b5e9669c33b02576782fce</anchor>
      <arglist>(int i, int j, int k, int n, const auto &amp;pfx, const auto &amp;pfy, const auto &amp;pfz, const auto &amp;nfx, const auto &amp;nfy, const auto &amp;nfz)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>ViscousFluxGP</name>
      <anchorfile>CNS__hydro__K_8h.html</anchorfile>
      <anchor>ae6e684436eaaa1317cdd02ed8d3740a9</anchor>
      <arglist>(int i, int j, int k, const Array4&lt; bool &gt; &amp;markers, auto const &amp;prims, const auto &amp;fx, const auto &amp;fy, const auto &amp;fz, const GpuArray&lt; Real, AMREX_SPACEDIM &gt; &amp;dxinv, const PROB::ProbClosures &amp;closures)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Diffusion.h</name>
    <path>/media/monal/main/code/amrsolver1/src/rhs/</path>
    <filename>Diffusion_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>High_resolution.h</name>
    <path>/media/monal/main/code/amrsolver1/src/rhs/</path>
    <filename>High__resolution_8h.html</filename>
    <includes id="CNS_8h" name="CNS.h" local="no" imported="no">CNS.h</includes>
    <namespace>HiRes</namespace>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cons2eulerflux</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>ae9a9b4ba4f4622937d36b68aacd48b14</anchor>
      <arglist>(int i, int j, int k, auto const &amp;cons, auto const &amp;fx, auto const &amp;fy, auto const &amp;fz, const PROB::ProbClosures &amp;closures)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cons2eulerflux_lambda</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>a24ae7264feab2ea771ba1aa5bd3dcaf5</anchor>
      <arglist>(int i, int j, int k, auto const &amp;cons, auto const &amp;fx, auto const &amp;fy, auto const &amp;fz, auto const &amp;lambda, const PROB::ProbClosures &amp;closures)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>weno5js</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>a3c47fdfaf892abc0232428716edf6964</anchor>
      <arglist>(const GpuArray&lt; Real, 5 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>numericalflux_globallaxsplit</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>a2da5365fe741884b8c6e8734831a0c5b</anchor>
      <arglist>(int i, int j, int k, int n, const auto &amp;cons, const auto &amp;pfx, const auto &amp;pfy, const auto &amp;pfz, const auto &amp;lambda, const auto &amp;nfx, const auto &amp;nfy, const auto &amp;nfz)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>numericalflux</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>ad0c0e48d1046026d107dc94f06d1db60</anchor>
      <arglist>(int i, int j, int k, int n, const auto &amp;pfx, const auto &amp;pfy, const auto &amp;pfz, const auto &amp;nfx, const auto &amp;nfy, const auto &amp;nfz)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_FORCE_INLINE void</type>
      <name>FluxWENO</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>a9acde555b29be67a5090961193700570</anchor>
      <arglist>(MultiFab &amp;statemf, MultiFab &amp;primsmf, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;numflxmf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Riemann.h</name>
    <path>/media/monal/main/code/amrsolver1/src/rhs/</path>
    <filename>Riemann_8h.html</filename>
    <includes id="CNS_8h" name="CNS.h" local="no" imported="no">CNS.h</includes>
    <namespace>Riemann</namespace>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>limiter</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a0c4284ae85241456e83209ef43b144ee</anchor>
      <arglist>(Real dlft, Real drgt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_slope_x</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>ae5a9c7f56dc88381edcfdfcd10fc28b4</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_slope_y</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a7a547aa3b362edad87f0b50c23b05f6c</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_slope_z</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>ad1adf2416831e505243a60dc3e5345db</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>riemann_prob</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a59017d1ac0b34448ce084ff3662f7fa5</anchor>
      <arglist>(const Real gamma, const Real smallp, const Real, const Real rl, const Real ul, const Real pl, const Real ut1l, const Real ut2l, const Real rr, const Real ur, const Real pr, const Real ut1r, const Real ut2r, Real &amp;flxrho, Real &amp;flxu, Real &amp;flxut, Real &amp;flxutt, Real &amp;flxe) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_riemann_x</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>addba2114102f609216d1f1972fc52350</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_riemann_y</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a85adddbc94ebbaf5fcffc339cdcdca1d</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_riemann_z</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a6e6fad774cbde1ec3a3f17b312825896</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_FORCE_INLINE void</type>
      <name>Flux</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a7e01072685c19b5a0744ee2130361f19</anchor>
      <arglist>(MultiFab &amp;statemf, MultiFab &amp;primsmf, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;numflxmf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bcs.cpp</name>
    <path>/media/monal/main/code/amrsolver1/src/set/</path>
    <filename>bcs_8cpp.html</filename>
    <includes id="CNS_8h" name="CNS.h" local="no" imported="no">CNS.h</includes>
    <class kind="struct">CnsFillExtDir</class>
    <member kind="function">
      <type>void</type>
      <name>cns_bcfill</name>
      <anchorfile>bcs_8cpp.html</anchorfile>
      <anchor>a2c7bfe733528958728a6d1f08075858e</anchor>
      <arglist>(Box const &amp;bx, FArrayBox &amp;data, const int dcomp, const int numcomp, Geometry const &amp;geom, const Real time, const Vector&lt; BCRec &gt; &amp;bcr, const int bcomp, const int scomp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CNS_setup.cpp</name>
    <path>/media/monal/main/code/amrsolver1/src/set/</path>
    <filename>CNS__setup_8cpp.html</filename>
    <includes id="CNS_8h" name="CNS.h" local="no" imported="no">CNS.h</includes>
    <includes id="CNS__K_8h" name="CNS_K.h" local="no" imported="no">CNS_K.h</includes>
    <member kind="typedef">
      <type>StateDescriptor::BndryFunc</type>
      <name>BndryFunc</name>
      <anchorfile>CNS__setup_8cpp.html</anchorfile>
      <anchor>ad47ae873d9ae303699aa86b6d7a9545c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CNSBld.cpp</name>
    <path>/media/monal/main/code/amrsolver1/src/set/</path>
    <filename>CNSBld_8cpp.html</filename>
    <includes id="CNS_8h" name="CNS.h" local="no" imported="no">CNS.h</includes>
    <class kind="class">CNSBld</class>
    <member kind="function">
      <type>LevelBld *</type>
      <name>getLevelBld</name>
      <anchorfile>CNSBld_8cpp.html</anchorfile>
      <anchor>a790b09e981a758dc1dc61de81be3bc83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>CNSBld</type>
      <name>CNS_bld</name>
      <anchorfile>CNSBld_8cpp.html</anchorfile>
      <anchor>ae1f2ec40a017ac727c7d0728d8d1d764</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CNS_advance.cpp</name>
    <path>/media/monal/main/code/amrsolver1/src/tim/</path>
    <filename>CNS__advance_8cpp.html</filename>
    <includes id="CNS_8h" name="CNS.h" local="no" imported="no">CNS.h</includes>
    <includes id="CNS__hydro__K_8h" name="CNS_hydro_K.h" local="no" imported="no">CNS_hydro_K.h</includes>
    <includes id="CentralKEEP_8h" name="CentralKEEP.h" local="no" imported="no">CentralKEEP.h</includes>
    <includes id="Riemann_8h" name="Riemann.h" local="no" imported="no">Riemann.h</includes>
    <includes id="High__resolution_8h" name="High_resolution.h" local="no" imported="no">High_resolution.h</includes>
  </compound>
  <compound kind="class">
    <name>Advection</name>
    <filename>classAdvection.html</filename>
  </compound>
  <compound kind="class">
    <name>calorifically_perfect_gas_t</name>
    <filename>classcalorifically__perfect__gas__t.html</filename>
    <member kind="variable">
      <type>Real</type>
      <name>gamma</name>
      <anchorfile>classcalorifically__perfect__gas__t.html</anchorfile>
      <anchor>a171f45721aabaaf5461aec9d0afbff12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>mw</name>
      <anchorfile>classcalorifically__perfect__gas__t.html</anchorfile>
      <anchor>abdc59866ff376e2d49ec523cf2184cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>Ru</name>
      <anchorfile>classcalorifically__perfect__gas__t.html</anchorfile>
      <anchor>a5502b6a6224b343cddcd931e581f522d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>cv</name>
      <anchorfile>classcalorifically__perfect__gas__t.html</anchorfile>
      <anchor>a78ecb68f859a88818ad8d335db2647bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>cp</name>
      <anchorfile>classcalorifically__perfect__gas__t.html</anchorfile>
      <anchor>a70e20e879ff141c1d89284866ffd3fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>Rspec</name>
      <anchorfile>classcalorifically__perfect__gas__t.html</anchorfile>
      <anchor>acc0a64ea786fd83434399ccff7ec3f75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>closures_derived_t</name>
    <filename>classclosures__derived__t.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable">
      <type>Real</type>
      <name>Cshock</name>
      <anchorfile>classclosures__derived__t.html</anchorfile>
      <anchor>a71c9933d658a22a8f942931eb48938b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>Cdamp</name>
      <anchorfile>classclosures__derived__t.html</anchorfile>
      <anchor>a3709f83195ab21fd963585e0b018bfba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CNS</name>
    <filename>classCNS.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>StateVariable</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Density</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afa84b208b6274070582000de605e7beb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Xmom</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afa2e4c6a35b76a37a45e45a03319ad6484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ymom</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afa07bbb939b92605e95a8e56d3c09b4ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Zmom</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afad7deee1e9ef51d9e5b8a784280068c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Etot</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afaf0f129e644749d3505496718c82e9749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StateDataType</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ad530b2a17c558b9efc61df863034fe2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>State_Type</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ad530b2a17c558b9efc61df863034fe2ca64f97ecf29970c745a6d5c6469c6aac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cost_Type</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ad530b2a17c558b9efc61df863034fe2ca991d4e2038989cac4d7294623d3daedb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Density</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afa84b208b6274070582000de605e7beb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Xmom</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afa2e4c6a35b76a37a45e45a03319ad6484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ymom</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afa07bbb939b92605e95a8e56d3c09b4ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Zmom</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afad7deee1e9ef51d9e5b8a784280068c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Etot</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19db9163ca9729a472a141eef3d7f9afaf0f129e644749d3505496718c82e9749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>State_Type</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ad530b2a17c558b9efc61df863034fe2ca64f97ecf29970c745a6d5c6469c6aac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cost_Type</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ad530b2a17c558b9efc61df863034fe2ca991d4e2038989cac4d7294623d3daedb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CNS</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a1309291650baed4b8037229960fba676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CNS</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a19d2c5b1f5469e7ec802921e7214f27b</anchor>
      <arglist>(amrex::Amr &amp;papa, int lev, const amrex::Geometry &amp;level_geom, const amrex::BoxArray &amp;bl, const amrex::DistributionMapping &amp;dm, amrex::Real time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CNS</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a48197a1f06cbc4e34eb03884e7ea50b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CNS</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a0d9a67eddaa078fcd94c8f7d8e30e9d8</anchor>
      <arglist>(const CNS &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>CNS &amp;</type>
      <name>operator=</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a005a97d53770bc9775328fff6295fea4</anchor>
      <arglist>(const CNS &amp;rhs)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a82afea16bd86047ee71cd9a2510deff4</anchor>
      <arglist>(amrex::AmrLevel &amp;old) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>aa81e96ae79104179b77643f3ae8ca78c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initData</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a9fe7352c76bebcd0ac0e6dcb0e48e366</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post_init</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a54a545df481d31edfbcf5f1e145c10c9</anchor>
      <arglist>(amrex::Real stop_time) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_rhs</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a8fed302a126d1da6f90eca57589fcb70</anchor>
      <arglist>(amrex::MultiFab &amp;S, amrex::MultiFab &amp;dSdt, amrex::Real dt, amrex::FluxRegister *fr_as_crse, amrex::FluxRegister *fr_as_fine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTemp</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>afa3a2058837e1173ece5bf1eb1750a0a</anchor>
      <arglist>(amrex::MultiFab &amp;State, int ng)</arglist>
    </member>
    <member kind="function">
      <type>amrex::Real</type>
      <name>estTimeStep</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a2ea82ccf446433baf83c3bdd30e263b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>amrex::Real</type>
      <name>initialTimeStep</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>aaa89010c03f9ab7da5302e775a711329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInitialDt</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>adf1f0571a86308ee1c28a6f89bb6b16c</anchor>
      <arglist>(int finest_level, int sub_cycle, amrex::Vector&lt; int &gt; &amp;n_cycle, const amrex::Vector&lt; amrex::IntVect &gt; &amp;ref_ratio, amrex::Vector&lt; amrex::Real &gt; &amp;dt_level, amrex::Real stop_time) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeNewDt</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a96115d4d8886d4109ae13c6c8a6a144d</anchor>
      <arglist>(int finest_level, int sub_cycle, amrex::Vector&lt; int &gt; &amp;n_cycle, const amrex::Vector&lt; amrex::IntVect &gt; &amp;ref_ratio, amrex::Vector&lt; amrex::Real &gt; &amp;dt_min, amrex::Vector&lt; amrex::Real &gt; &amp;dt_level, amrex::Real stop_time, int post_regrid_flag) override</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>advance</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a4ee2511ec4013744d11067b5f360c7e9</anchor>
      <arglist>(amrex::Real time, amrex::Real dt, int iteration, int ncycle) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post_timestep</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a437a286d7d2a766c471bf87802409c2b</anchor>
      <arglist>(int iteration) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postCoarseTimeStep</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a07f9d07ea33fe1c8664d1bfa8b5c06b3</anchor>
      <arglist>(Real time) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post_regrid</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a2c9ede97cc46d7838c7084a4ca85403b</anchor>
      <arglist>(int lbase, int new_finest) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>errorEst</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a20f953cbc7eab1ad056edf1d7b88d798</anchor>
      <arglist>(amrex::TagBoxArray &amp;tb, int clearval, int tagval, amrex::Real time, int n_error_buf=0, int ngrow=0) override</arglist>
    </member>
    <member kind="function">
      <type>CNS &amp;</type>
      <name>getLevel</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a34d41264b8f3718bba17e3da33061a08</anchor>
      <arglist>(int lev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMetrics</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ab5beee282c4bafb7471c61ae8df0693f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>avgDown</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a096dd2c07de1a5595c25fd5c1ba22a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTotal</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a3736ca7a6aa435d07982130e577b9575</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writePlotFile</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>af8e56d234201c1939529b674f81216c7</anchor>
      <arglist>(const std::string &amp;dir, std::ostream &amp;os, VisMF::How how=VisMF::NFiles) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writePlotFilePost</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a1b5bb1bfca768b5717f52916f4a8ac73</anchor>
      <arglist>(const std::string &amp;dir, std::ostream &amp;os) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>read_params</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a370b3dd73bd48812261b402df432490f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>variableSetUp</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ac5c1beb8e2c7835b8f4fabf35b041ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>variableCleanUp</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>afaf1e7769a2d42c40b7e31e41cb79918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; amrex::FluxRegister &gt;</type>
      <name>flux_reg</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ab53b845033e0898cccaeeb5517dac743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>num_state_data_types</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ad0df4fc6cc83a0d60e76b81b0dcb9b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>do_reflux</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a47da85ac5007c367ac373ec4444c3dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>verbose</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a4ec3344872151dce8c6f5c0ca64b475e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static amrex::Real</type>
      <name>cfl</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a2f615df1d2e42a240069f49cfab107d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>refine_max_dengrad_lev</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>afac9383090af0763469184958386fb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static amrex::Real</type>
      <name>refine_dengrad</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a0456efc0789d7dcc3cb62970910dc61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static amrex::Real</type>
      <name>gravity</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a669335d403da47bf62a3de3b4b02d156</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static amrex::Real</type>
      <name>dt_constant</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a8180dca1bb3dba56b021e3b4ed4a3d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>dt_dynamic</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a79496fce32ac6b504dd6d43744ed5cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>nstep_screen_output</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ab7845598f894db786aea192baeec4d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>flux_euler</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>afe803941c19f0e8cb88aa9859febb042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>art_diss</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a7f0fb80fb7e2931bfcc047889ff3d246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>order_rk</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a01ee9fbe439d85236126a2744ca60480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>stages_rk</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>aee30ae574636442b8b9960067463e5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>rhs_euler</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a209ec19467dac97fbdeaa7a4d75998df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>rhs_visc</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a8a2193b4006fbbb9182fe90a5326adea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>rhs_source</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a9b96aa1da4a572972abcee5497009c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>ib_move</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a31325aa106f61b233dca9b9cdb80111f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>plot_surf</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ac68860af33d625a26b7f101d25ee6c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Vector&lt; MultiFab &gt;</type>
      <name>VdSdt</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a2f17b575193fdc8cb89d9a1db001913d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Vector&lt; MultiFab &gt;</type>
      <name>VSborder</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>af6558f9ed8205ea9a1f8d77124478947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Vector&lt; MultiFab &gt;</type>
      <name>Vprimsmf</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>afed442446b9f731053ac6cdd32f6b286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Vector&lt; Array&lt; MultiFab, AMREX_SPACEDIM &gt; &gt;</type>
      <name>Vnumflxmf</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a237e6d48f18becf1a6e4ded3a2d347f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Vector&lt; Array&lt; MultiFab, AMREX_SPACEDIM &gt; &gt;</type>
      <name>Vpntvflxmf</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a02db345a113aa5b4349e662c97a38342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PROB::ProbClosures *</type>
      <name>h_prob_closures</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a7bb288f0b0048bc12ed8ae26b0155c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PROB::ProbClosures *</type>
      <name>d_prob_closures</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a5862bbfd9bbddc7613fe7430be497f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PROB::ProbParm *</type>
      <name>h_prob_parm</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a337915eb414653768d497a874dcde6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static PROB::ProbParm *</type>
      <name>d_prob_parm</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>a7fd9b3298cf0b8e29c314127e131fa39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static BCRec *</type>
      <name>h_phys_bc</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>ad2039988ea3a60abf9d110554e02d7b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static BCRec *</type>
      <name>d_phys_bc</name>
      <anchorfile>classCNS.html</anchorfile>
      <anchor>abeeef8a96dc8d2526704e66719849d31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CNSBld</name>
    <filename>classCNSBld.html</filename>
  </compound>
  <compound kind="struct">
    <name>CnsFillExtDir</name>
    <filename>structCnsFillExtDir.html</filename>
    <member kind="function">
      <type>AMREX_GPU_DEVICE void</type>
      <name>operator()</name>
      <anchorfile>structCnsFillExtDir.html</anchorfile>
      <anchor>a7d4ffb87305ff52155d20d0d84f16f41</anchor>
      <arglist>(const IntVect &amp;iv, Array4&lt; Real &gt; const &amp;dest, const int dcomp, const int numcomp, GeometryData const &amp;geom, const Real time, const BCRec *bcr, const int bcomp, const int) const</arglist>
    </member>
    <member kind="variable">
      <type>PROB::ProbParm *</type>
      <name>lprobparm</name>
      <anchorfile>structCnsFillExtDir.html</anchorfile>
      <anchor>a0998f23bf45ee3cc41aca67c99c86a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PROB::ProbClosures *</type>
      <name>lclosures</name>
      <anchorfile>structCnsFillExtDir.html</anchorfile>
      <anchor>a4cd23c9d003cee25fc4242b05a6a3543</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cond_const_t</name>
    <filename>classcond__const__t.html</filename>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>cond</name>
      <anchorfile>classcond__const__t.html</anchorfile>
      <anchor>a68d3186faf80a1aa209e805de09301f1</anchor>
      <arglist>(Real &amp;T) const</arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>cond_ref</name>
      <anchorfile>classcond__const__t.html</anchorfile>
      <anchor>ae460643af6d5f44c5661bae8c63a490d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cond_suth_t</name>
    <filename>classcond__suth__t.html</filename>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>cond</name>
      <anchorfile>classcond__suth__t.html</anchorfile>
      <anchor>a1492cbd12548c6557b19b0395d8c9f43</anchor>
      <arglist>(Real &amp;T) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EosBase</name>
    <filename>classEosBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>pressure</name>
      <anchorfile>classEosBase.html</anchorfile>
      <anchor>aad1d807f5d3edbbdeba0332aa8f3ab87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>density</name>
      <anchorfile>classEosBase.html</anchorfile>
      <anchor>a9da8ac93ac7ad7f568a56ae2df25594e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>energy</name>
      <anchorfile>classEosBase.html</anchorfile>
      <anchor>a6dd82e0609dd1ad1177b2cfbab67c9a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FluidState</name>
    <filename>classFluidState.html</filename>
  </compound>
  <compound kind="struct">
    <name>IBM::gpData_t</name>
    <filename>structIBM_1_1gpData__t.html</filename>
    <member kind="function">
      <type></type>
      <name>gpData_t</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>a2dcf566c5d9c84b871125e70fade28aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ngps</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>a4ffba4d4b82e351308a38c852053a415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Point_and_primitive_id &gt;</type>
      <name>closest_cgal</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>af34569ede451cac3d84ddb1e1ca0584b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Array1D&lt; int, 0, AMREX_SPACEDIM-1 &gt; &gt;</type>
      <name>gp_ijk</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>ac2a1f182ea611fd539d30b0e37d49707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &gt;</type>
      <name>normal</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>a5af70594cdc20425ceb635b422ed8b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &gt;</type>
      <name>tangent1</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>a096723e1270e4fc1d292567e9f56dd77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &gt;</type>
      <name>tangent2</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>a1fc9c2eddcfe6eb77598be3878e97fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Array1D&lt; Real, 0, AMREX_SPACEDIM-1 &gt; &gt;</type>
      <name>ib_xyz</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>a36cfbf4d4bd1c2369be07646b49cf80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Real &gt;</type>
      <name>disGP</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>ab130b8cdca7247fb7c9e7710f61d6973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Real &gt;</type>
      <name>disIM</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>a614060371c2f6b5bf7e023b126bb9de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; int &gt;</type>
      <name>geomIdx</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>ad3b4ad3640dbd8947d1426f1565682b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Array2D&lt; Real, 0, NIMPS-1, 0, AMREX_SPACEDIM-1 &gt; &gt;</type>
      <name>imp_xyz</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>a91e734453ba5a00bdc5d7ee769175bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Array2D&lt; int, 0, NIMPS-1, 0, AMREX_SPACEDIM-1 &gt; &gt;</type>
      <name>imp_ijk</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>a47dd83fc0c0bbfa7b887cbfda464d6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Array2D&lt; Real, 0, NIMPS-1, 0, 7 &gt; &gt;</type>
      <name>imp_ipweights</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>afb4b7e71c94d2642ffeed1dfc726c735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gpu::ManagedVector&lt; Array1D&lt; int, 0, AMREX_SPACEDIM-1 &gt; &gt;</type>
      <name>indexCube</name>
      <anchorfile>structIBM_1_1gpData__t.html</anchorfile>
      <anchor>adef7a3cd3e3d61fad726f8ab600a814f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IBM::IB</name>
    <filename>classIBM_1_1IB.html</filename>
    <member kind="function">
      <type></type>
      <name>IB</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a09f6960bfddbfc3f11d5c1ea88126fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IB</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>ac796bb3e4cbdb5604997757bb1e26526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a44bbe21ff8a6b8c8b2e5e3b2a06a904c</anchor>
      <arglist>(Amr *pointer_amr, const int nghost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMFs</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a047c2970279692b0e1a227744aaec732</anchor>
      <arglist>(const BoxArray &amp;bxa, const DistributionMapping &amp;dm, int lev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyMFs</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a9092771a93b992a8ee368d98f3e51a2d</anchor>
      <arglist>(int lev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readGeom</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a54fd5d0d5a8a9a229fc9ccd968fb6d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMarkers</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a7c0a9d89732c1e5175582e2ca4797fba</anchor>
      <arglist>(int lev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialiseGPs</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>ac0f484ffb8af42fd84c9385ee7d923cb</anchor>
      <arglist>(int lev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeGPs</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>aebb6f1ca76481dd7fc5e8423865e4d55</anchor>
      <arglist>(int lev, MultiFab &amp;consmf, MultiFab &amp;primsmf, const PROB::ProbClosures &amp;closures)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveGeom</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a0b195fdb35fffb20ce8c785b8e846ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSurf</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a8a0cb7ce4071f9a551b848ff2bac8f2b</anchor>
      <arglist>(int lev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>compute_plane_equations</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>af9c6a388abcff783ac03ffac79a2eb7d</anchor>
      <arglist>(Polyhedron::Facet &amp;f)</arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Real &gt;</type>
      <name>disIM</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a73be569d71c7dfad84a7cce2a0086586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MAX_LEVEL</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a1f9ecaba9a5162fbe3d22e68e5e67649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NGHOST_IB</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a8e53bbbdda28918c0bd9e36d1a583188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NVAR_IB</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a4c42acc282725731e0ede5c173a43b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NGEOM</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a20332eaba81fc84bdad9ab6847e5055e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Amr *</type>
      <name>pamr</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a3ba2ac24f1f7ecd63d34353d2fb2e999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; IntVect &gt;</type>
      <name>ref_ratio</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>adb32acf0ce453f0e54b666d3fcaad2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; GpuArray&lt; Real, AMREX_SPACEDIM &gt; &gt;</type>
      <name>cellSizes</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a7c9679ddd949b4945b05b22f92c3f506</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; IBMultiFab * &gt;</type>
      <name>ibMFa</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a8ff615e4167cbecef6daee586831df7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; MultiFab &gt;</type>
      <name>lsMFa</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a85b4b2b8f08e3bbf0f43e121adbcb77a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Polyhedron &gt;</type>
      <name>VGeom</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a0d8d0c5a1e56af1fd2a2ffaa06864737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Tree * &gt;</type>
      <name>VtreePtr</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>ac97ab52f1cd6501b01af5f42bd675c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; std::map&lt; face_descriptor, Vector_CGAL &gt; &gt;</type>
      <name>Vfnormals</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>a5409aa3a70cf8323646bd2161dd481cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; inside_t * &gt;</type>
      <name>VInOutFunc</name>
      <anchorfile>classIBM_1_1IB.html</anchorfile>
      <anchor>af4c6de2e2e91cf90ff24bf502088eccb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IBM::IBFab</name>
    <filename>classIBM_1_1IBFab.html</filename>
    <member kind="function">
      <type></type>
      <name>IBFab</name>
      <anchorfile>classIBM_1_1IBFab.html</anchorfile>
      <anchor>a376c453cd41215d6f5398936f9bb5a26</anchor>
      <arglist>(const Box &amp;b, int ncomp, bool alloc=true, bool shared=false, Arena *ar=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IBFab</name>
      <anchorfile>classIBM_1_1IBFab.html</anchorfile>
      <anchor>a60abb898e8a60741f8ed26529c7ee544</anchor>
      <arglist>(const IBFab &amp;rhs, MakeType make_type, int scomp, int ncomp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IBFab</name>
      <anchorfile>classIBM_1_1IBFab.html</anchorfile>
      <anchor>a0a8cd36e1104383914b0cb07116d60b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>gpData_t</type>
      <name>gpData</name>
      <anchorfile>classIBM_1_1IBFab.html</anchorfile>
      <anchor>a7b39d2c2c612847501a75b9b39e8a0b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IBM::IBMultiFab</name>
    <filename>classIBM_1_1IBMultiFab.html</filename>
    <member kind="function">
      <type></type>
      <name>IBMultiFab</name>
      <anchorfile>classIBM_1_1IBMultiFab.html</anchorfile>
      <anchor>a3a7b1c3342b6a51223b088a028f3a948</anchor>
      <arglist>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, const int nvar, const int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; IBFab &gt; &amp;factory=DefaultFabFactory&lt; IBFab &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IBMultiFab</name>
      <anchorfile>classIBM_1_1IBMultiFab.html</anchorfile>
      <anchor>a7ce9732eb3c0a0084f2238d8496041ba</anchor>
      <arglist>(IBMultiFab &amp;&amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IBMultiFab</name>
      <anchorfile>classIBM_1_1IBMultiFab.html</anchorfile>
      <anchor>ab79b78cf139cf42b7e892def9804e160</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copytoRealMF</name>
      <anchorfile>classIBM_1_1IBMultiFab.html</anchorfile>
      <anchor>a26ed4f3bf7dbad1eec7ad8f19913264d</anchor>
      <arglist>(MultiFab &amp;mf, int ibcomp, int mfcomp)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IBM::surfdata</name>
    <filename>structIBM_1_1surfdata.html</filename>
    <member kind="variable">
      <type>Array&lt; Real, NPRIM &gt;</type>
      <name>state</name>
      <anchorfile>structIBM_1_1surfdata.html</anchorfile>
      <anchor>ac4ac26a2b3d8821c8df693980fd2bd74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array&lt; Real, AMREX_SPACEDIM &gt;</type>
      <name>displace</name>
      <anchorfile>structIBM_1_1surfdata.html</anchorfile>
      <anchor>ade6d2b64038df080a6726fde49a541f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>visc_const_t</name>
    <filename>classvisc__const__t.html</filename>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>visc</name>
      <anchorfile>classvisc__const__t.html</anchorfile>
      <anchor>afcbd7015c19dd2a03babd760eb39aef9</anchor>
      <arglist>(const Real &amp;T) const</arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>visc_ref</name>
      <anchorfile>classvisc__const__t.html</anchorfile>
      <anchor>a7edf65557df0fccf706dcf259ecd616b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>visc_suth_t</name>
    <filename>classvisc__suth__t.html</filename>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>visc</name>
      <anchorfile>classvisc__suth__t.html</anchorfile>
      <anchor>a7ca62f6aa4db8aad2416f9c1190edd7e</anchor>
      <arglist>(const Real &amp;T) const</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>CentralKEEP</name>
    <filename>namespaceCentralKEEP.html</filename>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>fDiv</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>ae953b30c463f9d7eaf144f1b09f19e86</anchor>
      <arglist>(Real f, Real fl)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>fgDiv</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>ae061deca643c9b262b4de2a7badd32bb</anchor>
      <arglist>(Real f, Real fl, Real g, Real gl)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>fgQuad</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>aec5b13640a497b36c9bb76a5e3797721</anchor>
      <arglist>(Real f, Real fl, Real g, Real gl)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>fghCubic</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a6b8cdc9184c5e5ea08187da5464737bd</anchor>
      <arglist>(Real f, Real fl, Real g, Real gl, Real h, Real hl)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>KEEP</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a2fb7ccc76076dde1ebbae4699f6a4c5f</anchor>
      <arglist>(int i, int j, int k, int halfsten, const GpuArray&lt; Real, 3 &gt; &amp;coeffs, const auto &amp;prims, const auto &amp;nfabfx, const auto &amp;nfabfy, const auto &amp;nfabfz, PROB::ProbClosures const &amp;closures)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>KEEPy</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a361d8d139b3ed9b1a976d7e40f1a47f8</anchor>
      <arglist>(int i, int j, int k, int halfsten, const GpuArray&lt; Real, 3 &gt; coeffs, const auto &amp;prims, const auto &amp;nfabfy, PROB::ProbClosures const &amp;parm)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_FORCE_INLINE void</type>
      <name>FluxKEEP</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>ab654c0f6fdd202df7bfb635990de0bd4</anchor>
      <arglist>(MultiFab &amp;statemf, MultiFab &amp;primsmf, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;numflxmf)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_FORCE_INLINE void</type>
      <name>Flux_2nd_Order_KEEP</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a1fe72f8d36b3e2527b53b2b48fa0e3d2</anchor>
      <arglist>(Geometry &amp;geom, MultiFab &amp;primsmf, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;numflxmf)</arglist>
    </member>
    <member kind="variable">
      <type>GpuArray&lt; Real, 3 &gt;</type>
      <name>coeffs</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>afd9feeadebe9ed1b9e675ce6c9f52446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GpuArray&lt; Real, 3 &gt;</type>
      <name>coeffs2</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>a062dd2ca304a59490db9136c8947493a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>order_keep</name>
      <anchorfile>namespaceCentralKEEP.html</anchorfile>
      <anchor>aae34eb1423fbae9b5476c98fec4ac1b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>HiRes</name>
    <filename>namespaceHiRes.html</filename>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cons2eulerflux</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>ae9a9b4ba4f4622937d36b68aacd48b14</anchor>
      <arglist>(int i, int j, int k, auto const &amp;cons, auto const &amp;fx, auto const &amp;fy, auto const &amp;fz, const PROB::ProbClosures &amp;closures)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cons2eulerflux_lambda</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>a24ae7264feab2ea771ba1aa5bd3dcaf5</anchor>
      <arglist>(int i, int j, int k, auto const &amp;cons, auto const &amp;fx, auto const &amp;fy, auto const &amp;fz, auto const &amp;lambda, const PROB::ProbClosures &amp;closures)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>weno5js</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>a3c47fdfaf892abc0232428716edf6964</anchor>
      <arglist>(const GpuArray&lt; Real, 5 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>numericalflux_globallaxsplit</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>a2da5365fe741884b8c6e8734831a0c5b</anchor>
      <arglist>(int i, int j, int k, int n, const auto &amp;cons, const auto &amp;pfx, const auto &amp;pfy, const auto &amp;pfz, const auto &amp;lambda, const auto &amp;nfx, const auto &amp;nfy, const auto &amp;nfz)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>numericalflux</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>ad0c0e48d1046026d107dc94f06d1db60</anchor>
      <arglist>(int i, int j, int k, int n, const auto &amp;pfx, const auto &amp;pfy, const auto &amp;pfz, const auto &amp;nfx, const auto &amp;nfy, const auto &amp;nfz)</arglist>
    </member>
    <member kind="function">
      <type>AMREX_FORCE_INLINE void</type>
      <name>FluxWENO</name>
      <anchorfile>namespaceHiRes.html</anchorfile>
      <anchor>a9acde555b29be67a5090961193700570</anchor>
      <arglist>(MultiFab &amp;statemf, MultiFab &amp;primsmf, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;numflxmf)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IBM</name>
    <filename>namespaceIBM.html</filename>
    <class kind="struct">IBM::surfdata</class>
    <class kind="struct">IBM::gpData_t</class>
    <class kind="class">IBM::IBFab</class>
    <class kind="class">IBM::IBMultiFab</class>
    <class kind="class">IBM::IB</class>
    <member kind="typedef">
      <type>CGAL::Simple_cartesian&lt; Real &gt;</type>
      <name>K2</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a5c173780993440fb7c53b55b9d617904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K2::Point_3</type>
      <name>Point</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>ab004ecad26abd07304721f93b53c96d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::Polyhedron_3&lt; K2 &gt;</type>
      <name>Polyhedron</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>aef0e4eb6d237070846f13a40d2e90063</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K2::FT</type>
      <name>FT</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a2ddefb5d5000c4bfda7bea2d34f5e6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K2::Segment_3</type>
      <name>Segment</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a3bc0f9fb0e76244cb684d35d4cf0ac83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::AABB_face_graph_triangle_primitive&lt; Polyhedron &gt;</type>
      <name>Primitive</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>af12ba22129ce6cc0a035cbc8c914cab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::AABB_traits&lt; K2, Primitive &gt;</type>
      <name>Traits</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a26dbd197d9ba9813a5c7aeb26f2282da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::AABB_tree&lt; Traits &gt;</type>
      <name>Tree</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>ad9f4d764f206d71381e965523b58ace3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tree::Point_and_primitive_id</type>
      <name>Point_and_primitive_id</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a7ae8422f8b42c8d6e43ac05822de0904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K2::Vector_3</type>
      <name>Vector_CGAL</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a3ed74778d4b5bb4688ad8aa65f024af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Polyhedron &gt;::face_descriptor</type>
      <name>face_descriptor</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>ad80af28e30018458d4c4c1efc0ba02d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CGAL::Side_of_triangle_mesh&lt; Polyhedron, K2 &gt;</type>
      <name>inside_t</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>abc7199df80b955d2b33855e7382f4d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IB</type>
      <name>ib</name>
      <anchorfile>namespaceIBM.html</anchorfile>
      <anchor>a4caba61add10b22958723fae113c891a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Riemann</name>
    <filename>namespaceRiemann.html</filename>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Real</type>
      <name>limiter</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a0c4284ae85241456e83209ef43b144ee</anchor>
      <arglist>(Real dlft, Real drgt) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_slope_x</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>ae5a9c7f56dc88381edcfdfcd10fc28b4</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_slope_y</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a7a547aa3b362edad87f0b50c23b05f6c</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_slope_z</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>ad1adf2416831e505243a60dc3e5345db</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>riemann_prob</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a59017d1ac0b34448ce084ff3662f7fa5</anchor>
      <arglist>(const Real gamma, const Real smallp, const Real, const Real rl, const Real ul, const Real pl, const Real ut1l, const Real ut2l, const Real rr, const Real ur, const Real pr, const Real ut1r, const Real ut2r, Real &amp;flxrho, Real &amp;flxu, Real &amp;flxut, Real &amp;flxutt, Real &amp;flxe) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_riemann_x</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>addba2114102f609216d1f1972fc52350</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_riemann_y</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a85adddbc94ebbaf5fcffc339cdcdca1d</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void</type>
      <name>cns_riemann_z</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a6e6fad774cbde1ec3a3f17b312825896</anchor>
      <arglist>(int i, int j, int k, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;dq, Array4&lt; Real const &gt; const &amp;q, PROB::ProbClosures const &amp;closures) noexcept</arglist>
    </member>
    <member kind="function">
      <type>AMREX_FORCE_INLINE void</type>
      <name>Flux</name>
      <anchorfile>namespaceRiemann.html</anchorfile>
      <anchor>a7e01072685c19b5a0744ee2130361f19</anchor>
      <arglist>(MultiFab &amp;statemf, MultiFab &amp;primsmf, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;numflxmf)</arglist>
    </member>
  </compound>
</tagfile>
